// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FLAME.proto

#include "FLAME.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace FLAME_Protocol {
constexpr DiscoveryPacket::DiscoveryPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DiscoveryPacketDefaultTypeInternal {
  constexpr DiscoveryPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscoveryPacketDefaultTypeInternal() {}
  union {
    DiscoveryPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscoveryPacketDefaultTypeInternal _DiscoveryPacket_default_instance_;
constexpr DiscoveryResponse::DiscoveryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ipaddress_(0u){}
struct DiscoveryResponseDefaultTypeInternal {
  constexpr DiscoveryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscoveryResponseDefaultTypeInternal() {}
  union {
    DiscoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
constexpr ControlPacket::ControlPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desiredaxis1_(0)
  , desiredaxis2_(0)
  , desiredaxis3_(0)
  , desiredaxis4_(0)
  , odrive0axis0error_(false)
  , odrive0axis1error_(false)
  , odrive0error_(false)
  , odrv0clearerrors_(false)
  , odrive1axis0error_(false)
  , odrive1axis1error_(false)
  , odrive1error_(false)
  , odrv1clearerrors_(false)
  , safetymode_(false){}
struct ControlPacketDefaultTypeInternal {
  constexpr ControlPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlPacketDefaultTypeInternal() {}
  union {
    ControlPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlPacketDefaultTypeInternal _ControlPacket_default_instance_;
constexpr ReviewPacket::ReviewPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actualaxis1_(0)
  , actualaxis2_(0)
  , actualaxis3_(0)
  , actualaxis4_(0)
  , odrive0axis0error_(false)
  , odrive0axis1error_(false)
  , odrive0error_(false)
  , odrv0clearerrors_(false)
  , odrive1axis0error_(false)
  , odrive1axis1error_(false)
  , odrive1error_(false)
  , odrv1clearerrors_(false)
  , safetymode_(false){}
struct ReviewPacketDefaultTypeInternal {
  constexpr ReviewPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReviewPacketDefaultTypeInternal() {}
  union {
    ReviewPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReviewPacketDefaultTypeInternal _ReviewPacket_default_instance_;
}  // namespace FLAME_Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FLAME_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FLAME_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FLAME_2eproto = nullptr;

const uint32_t TableStruct_FLAME_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::DiscoveryPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::DiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::DiscoveryResponse, ipaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, desiredaxis1_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, desiredaxis2_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, desiredaxis3_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, desiredaxis4_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive0axis0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive0axis1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrv0clearerrors_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive1axis0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive1axis1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrive1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, odrv1clearerrors_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ControlPacket, safetymode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, actualaxis1_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, actualaxis2_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, actualaxis3_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, actualaxis4_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive0axis0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive0axis1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrv0clearerrors_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive1axis0error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive1axis1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrive1error_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, odrv1clearerrors_),
  PROTOBUF_FIELD_OFFSET(::FLAME_Protocol::ReviewPacket, safetymode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FLAME_Protocol::DiscoveryPacket)},
  { 6, -1, -1, sizeof(::FLAME_Protocol::DiscoveryResponse)},
  { 13, -1, -1, sizeof(::FLAME_Protocol::ControlPacket)},
  { 32, -1, -1, sizeof(::FLAME_Protocol::ReviewPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLAME_Protocol::_DiscoveryPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLAME_Protocol::_DiscoveryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLAME_Protocol::_ControlPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLAME_Protocol::_ReviewPacket_default_instance_),
};

const char descriptor_table_protodef_FLAME_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013FLAME.proto\022\016FLAME_Protocol\"\021\n\017Discove"
  "ryPacket\"&\n\021DiscoveryResponse\022\021\n\tipAddre"
  "ss\030\001 \001(\r\"\307\002\n\rControlPacket\022\024\n\014desiredAxi"
  "s1\030\001 \001(\002\022\024\n\014desiredAxis2\030\002 \001(\002\022\024\n\014desire"
  "dAxis3\030\003 \001(\002\022\024\n\014desiredAxis4\030\004 \001(\002\022\031\n\021od"
  "rive0Axis0Error\030\005 \001(\010\022\031\n\021odrive0Axis1Err"
  "or\030\006 \001(\010\022\024\n\014odrive0Error\030\007 \001(\010\022\030\n\020odrv0C"
  "learErrors\030\010 \001(\010\022\031\n\021odrive1Axis0Error\030\t "
  "\001(\010\022\031\n\021odrive1Axis1Error\030\n \001(\010\022\024\n\014odrive"
  "1Error\030\013 \001(\010\022\030\n\020odrv1ClearErrors\030\014 \001(\010\022\022"
  "\n\nsafetyMode\030\r \001(\010\"\302\002\n\014ReviewPacket\022\023\n\013a"
  "ctualAxis1\030\001 \001(\002\022\023\n\013actualAxis2\030\002 \001(\002\022\023\n"
  "\013actualAxis3\030\003 \001(\002\022\023\n\013actualAxis4\030\004 \001(\002\022"
  "\031\n\021odrive0Axis0Error\030\005 \001(\010\022\031\n\021odrive0Axi"
  "s1Error\030\006 \001(\010\022\024\n\014odrive0Error\030\007 \001(\010\022\030\n\020o"
  "drv0ClearErrors\030\010 \001(\010\022\031\n\021odrive1Axis0Err"
  "or\030\t \001(\010\022\031\n\021odrive1Axis1Error\030\n \001(\010\022\024\n\014o"
  "drive1Error\030\013 \001(\010\022\030\n\020odrv1ClearErrors\030\014 "
  "\001(\010\022\022\n\nsafetyMode\030\r \001(\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FLAME_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FLAME_2eproto = {
  false, false, 751, descriptor_table_protodef_FLAME_2eproto, "FLAME.proto", 
  &descriptor_table_FLAME_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_FLAME_2eproto::offsets,
  file_level_metadata_FLAME_2eproto, file_level_enum_descriptors_FLAME_2eproto, file_level_service_descriptors_FLAME_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FLAME_2eproto_getter() {
  return &descriptor_table_FLAME_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FLAME_2eproto(&descriptor_table_FLAME_2eproto);
namespace FLAME_Protocol {

// ===================================================================

class DiscoveryPacket::_Internal {
 public:
};

DiscoveryPacket::DiscoveryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:FLAME_Protocol.DiscoveryPacket)
}
DiscoveryPacket::DiscoveryPacket(const DiscoveryPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FLAME_Protocol.DiscoveryPacket)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryPacket::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FLAME_2eproto_getter, &descriptor_table_FLAME_2eproto_once,
      file_level_metadata_FLAME_2eproto[0]);
}

// ===================================================================

class DiscoveryResponse::_Internal {
 public:
};

DiscoveryResponse::DiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLAME_Protocol.DiscoveryResponse)
}
DiscoveryResponse::DiscoveryResponse(const DiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipaddress_ = from.ipaddress_;
  // @@protoc_insertion_point(copy_constructor:FLAME_Protocol.DiscoveryResponse)
}

inline void DiscoveryResponse::SharedCtor() {
ipaddress_ = 0u;
}

DiscoveryResponse::~DiscoveryResponse() {
  // @@protoc_insertion_point(destructor:FLAME_Protocol.DiscoveryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscoveryResponse::ArenaDtor(void* object) {
  DiscoveryResponse* _this = reinterpret_cast< DiscoveryResponse* >(object);
  (void)_this;
}
void DiscoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLAME_Protocol.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipaddress_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ipAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ipaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLAME_Protocol.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ipAddress = 1;
  if (this->_internal_ipaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ipaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLAME_Protocol.DiscoveryResponse)
  return target;
}

size_t DiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLAME_Protocol.DiscoveryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ipAddress = 1;
  if (this->_internal_ipaddress() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ipaddress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscoveryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryResponse::GetClassData() const { return &_class_data_; }

void DiscoveryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscoveryResponse *>(to)->MergeFrom(
      static_cast<const DiscoveryResponse &>(from));
}


void DiscoveryResponse::MergeFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLAME_Protocol.DiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ipaddress() != 0) {
    _internal_set_ipaddress(from._internal_ipaddress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscoveryResponse::CopyFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLAME_Protocol.DiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryResponse::IsInitialized() const {
  return true;
}

void DiscoveryResponse::InternalSwap(DiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ipaddress_, other->ipaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FLAME_2eproto_getter, &descriptor_table_FLAME_2eproto_once,
      file_level_metadata_FLAME_2eproto[1]);
}

// ===================================================================

class ControlPacket::_Internal {
 public:
};

ControlPacket::ControlPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLAME_Protocol.ControlPacket)
}
ControlPacket::ControlPacket(const ControlPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desiredaxis1_, &from.desiredaxis1_,
    static_cast<size_t>(reinterpret_cast<char*>(&safetymode_) -
    reinterpret_cast<char*>(&desiredaxis1_)) + sizeof(safetymode_));
  // @@protoc_insertion_point(copy_constructor:FLAME_Protocol.ControlPacket)
}

inline void ControlPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desiredaxis1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&safetymode_) -
    reinterpret_cast<char*>(&desiredaxis1_)) + sizeof(safetymode_));
}

ControlPacket::~ControlPacket() {
  // @@protoc_insertion_point(destructor:FLAME_Protocol.ControlPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlPacket::ArenaDtor(void* object) {
  ControlPacket* _this = reinterpret_cast< ControlPacket* >(object);
  (void)_this;
}
void ControlPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:FLAME_Protocol.ControlPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&desiredaxis1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safetymode_) -
      reinterpret_cast<char*>(&desiredaxis1_)) + sizeof(safetymode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float desiredAxis1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          desiredaxis1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float desiredAxis2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          desiredaxis2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float desiredAxis3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          desiredaxis3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float desiredAxis4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          desiredaxis4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Axis0Error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          odrive0axis0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Axis1Error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          odrive0axis1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          odrive0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrv0ClearErrors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          odrv0clearerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Axis0Error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          odrive1axis0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Axis1Error = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          odrive1axis1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          odrive1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrv1ClearErrors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          odrv1clearerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool safetyMode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          safetymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLAME_Protocol.ControlPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float desiredAxis1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis1 = this->_internal_desiredaxis1();
  uint32_t raw_desiredaxis1;
  memcpy(&raw_desiredaxis1, &tmp_desiredaxis1, sizeof(tmp_desiredaxis1));
  if (raw_desiredaxis1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_desiredaxis1(), target);
  }

  // float desiredAxis2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis2 = this->_internal_desiredaxis2();
  uint32_t raw_desiredaxis2;
  memcpy(&raw_desiredaxis2, &tmp_desiredaxis2, sizeof(tmp_desiredaxis2));
  if (raw_desiredaxis2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_desiredaxis2(), target);
  }

  // float desiredAxis3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis3 = this->_internal_desiredaxis3();
  uint32_t raw_desiredaxis3;
  memcpy(&raw_desiredaxis3, &tmp_desiredaxis3, sizeof(tmp_desiredaxis3));
  if (raw_desiredaxis3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desiredaxis3(), target);
  }

  // float desiredAxis4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis4 = this->_internal_desiredaxis4();
  uint32_t raw_desiredaxis4;
  memcpy(&raw_desiredaxis4, &tmp_desiredaxis4, sizeof(tmp_desiredaxis4));
  if (raw_desiredaxis4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desiredaxis4(), target);
  }

  // bool odrive0Axis0Error = 5;
  if (this->_internal_odrive0axis0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_odrive0axis0error(), target);
  }

  // bool odrive0Axis1Error = 6;
  if (this->_internal_odrive0axis1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_odrive0axis1error(), target);
  }

  // bool odrive0Error = 7;
  if (this->_internal_odrive0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_odrive0error(), target);
  }

  // bool odrv0ClearErrors = 8;
  if (this->_internal_odrv0clearerrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_odrv0clearerrors(), target);
  }

  // bool odrive1Axis0Error = 9;
  if (this->_internal_odrive1axis0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_odrive1axis0error(), target);
  }

  // bool odrive1Axis1Error = 10;
  if (this->_internal_odrive1axis1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_odrive1axis1error(), target);
  }

  // bool odrive1Error = 11;
  if (this->_internal_odrive1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_odrive1error(), target);
  }

  // bool odrv1ClearErrors = 12;
  if (this->_internal_odrv1clearerrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_odrv1clearerrors(), target);
  }

  // bool safetyMode = 13;
  if (this->_internal_safetymode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_safetymode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLAME_Protocol.ControlPacket)
  return target;
}

size_t ControlPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLAME_Protocol.ControlPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float desiredAxis1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis1 = this->_internal_desiredaxis1();
  uint32_t raw_desiredaxis1;
  memcpy(&raw_desiredaxis1, &tmp_desiredaxis1, sizeof(tmp_desiredaxis1));
  if (raw_desiredaxis1 != 0) {
    total_size += 1 + 4;
  }

  // float desiredAxis2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis2 = this->_internal_desiredaxis2();
  uint32_t raw_desiredaxis2;
  memcpy(&raw_desiredaxis2, &tmp_desiredaxis2, sizeof(tmp_desiredaxis2));
  if (raw_desiredaxis2 != 0) {
    total_size += 1 + 4;
  }

  // float desiredAxis3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis3 = this->_internal_desiredaxis3();
  uint32_t raw_desiredaxis3;
  memcpy(&raw_desiredaxis3, &tmp_desiredaxis3, sizeof(tmp_desiredaxis3));
  if (raw_desiredaxis3 != 0) {
    total_size += 1 + 4;
  }

  // float desiredAxis4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis4 = this->_internal_desiredaxis4();
  uint32_t raw_desiredaxis4;
  memcpy(&raw_desiredaxis4, &tmp_desiredaxis4, sizeof(tmp_desiredaxis4));
  if (raw_desiredaxis4 != 0) {
    total_size += 1 + 4;
  }

  // bool odrive0Axis0Error = 5;
  if (this->_internal_odrive0axis0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive0Axis1Error = 6;
  if (this->_internal_odrive0axis1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive0Error = 7;
  if (this->_internal_odrive0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrv0ClearErrors = 8;
  if (this->_internal_odrv0clearerrors() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Axis0Error = 9;
  if (this->_internal_odrive1axis0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Axis1Error = 10;
  if (this->_internal_odrive1axis1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Error = 11;
  if (this->_internal_odrive1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrv1ClearErrors = 12;
  if (this->_internal_odrv1clearerrors() != 0) {
    total_size += 1 + 1;
  }

  // bool safetyMode = 13;
  if (this->_internal_safetymode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlPacket::GetClassData() const { return &_class_data_; }

void ControlPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlPacket *>(to)->MergeFrom(
      static_cast<const ControlPacket &>(from));
}


void ControlPacket::MergeFrom(const ControlPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLAME_Protocol.ControlPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis1 = from._internal_desiredaxis1();
  uint32_t raw_desiredaxis1;
  memcpy(&raw_desiredaxis1, &tmp_desiredaxis1, sizeof(tmp_desiredaxis1));
  if (raw_desiredaxis1 != 0) {
    _internal_set_desiredaxis1(from._internal_desiredaxis1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis2 = from._internal_desiredaxis2();
  uint32_t raw_desiredaxis2;
  memcpy(&raw_desiredaxis2, &tmp_desiredaxis2, sizeof(tmp_desiredaxis2));
  if (raw_desiredaxis2 != 0) {
    _internal_set_desiredaxis2(from._internal_desiredaxis2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis3 = from._internal_desiredaxis3();
  uint32_t raw_desiredaxis3;
  memcpy(&raw_desiredaxis3, &tmp_desiredaxis3, sizeof(tmp_desiredaxis3));
  if (raw_desiredaxis3 != 0) {
    _internal_set_desiredaxis3(from._internal_desiredaxis3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_desiredaxis4 = from._internal_desiredaxis4();
  uint32_t raw_desiredaxis4;
  memcpy(&raw_desiredaxis4, &tmp_desiredaxis4, sizeof(tmp_desiredaxis4));
  if (raw_desiredaxis4 != 0) {
    _internal_set_desiredaxis4(from._internal_desiredaxis4());
  }
  if (from._internal_odrive0axis0error() != 0) {
    _internal_set_odrive0axis0error(from._internal_odrive0axis0error());
  }
  if (from._internal_odrive0axis1error() != 0) {
    _internal_set_odrive0axis1error(from._internal_odrive0axis1error());
  }
  if (from._internal_odrive0error() != 0) {
    _internal_set_odrive0error(from._internal_odrive0error());
  }
  if (from._internal_odrv0clearerrors() != 0) {
    _internal_set_odrv0clearerrors(from._internal_odrv0clearerrors());
  }
  if (from._internal_odrive1axis0error() != 0) {
    _internal_set_odrive1axis0error(from._internal_odrive1axis0error());
  }
  if (from._internal_odrive1axis1error() != 0) {
    _internal_set_odrive1axis1error(from._internal_odrive1axis1error());
  }
  if (from._internal_odrive1error() != 0) {
    _internal_set_odrive1error(from._internal_odrive1error());
  }
  if (from._internal_odrv1clearerrors() != 0) {
    _internal_set_odrv1clearerrors(from._internal_odrv1clearerrors());
  }
  if (from._internal_safetymode() != 0) {
    _internal_set_safetymode(from._internal_safetymode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlPacket::CopyFrom(const ControlPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLAME_Protocol.ControlPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPacket::IsInitialized() const {
  return true;
}

void ControlPacket::InternalSwap(ControlPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlPacket, safetymode_)
      + sizeof(ControlPacket::safetymode_)
      - PROTOBUF_FIELD_OFFSET(ControlPacket, desiredaxis1_)>(
          reinterpret_cast<char*>(&desiredaxis1_),
          reinterpret_cast<char*>(&other->desiredaxis1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FLAME_2eproto_getter, &descriptor_table_FLAME_2eproto_once,
      file_level_metadata_FLAME_2eproto[2]);
}

// ===================================================================

class ReviewPacket::_Internal {
 public:
};

ReviewPacket::ReviewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLAME_Protocol.ReviewPacket)
}
ReviewPacket::ReviewPacket(const ReviewPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actualaxis1_, &from.actualaxis1_,
    static_cast<size_t>(reinterpret_cast<char*>(&safetymode_) -
    reinterpret_cast<char*>(&actualaxis1_)) + sizeof(safetymode_));
  // @@protoc_insertion_point(copy_constructor:FLAME_Protocol.ReviewPacket)
}

inline void ReviewPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actualaxis1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&safetymode_) -
    reinterpret_cast<char*>(&actualaxis1_)) + sizeof(safetymode_));
}

ReviewPacket::~ReviewPacket() {
  // @@protoc_insertion_point(destructor:FLAME_Protocol.ReviewPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReviewPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReviewPacket::ArenaDtor(void* object) {
  ReviewPacket* _this = reinterpret_cast< ReviewPacket* >(object);
  (void)_this;
}
void ReviewPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReviewPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReviewPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:FLAME_Protocol.ReviewPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actualaxis1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safetymode_) -
      reinterpret_cast<char*>(&actualaxis1_)) + sizeof(safetymode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReviewPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float actualAxis1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          actualaxis1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float actualAxis2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          actualaxis2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float actualAxis3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          actualaxis3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float actualAxis4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          actualaxis4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Axis0Error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          odrive0axis0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Axis1Error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          odrive0axis1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive0Error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          odrive0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrv0ClearErrors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          odrv0clearerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Axis0Error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          odrive1axis0error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Axis1Error = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          odrive1axis1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrive1Error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          odrive1error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool odrv1ClearErrors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          odrv1clearerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool safetyMode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          safetymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReviewPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLAME_Protocol.ReviewPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float actualAxis1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis1 = this->_internal_actualaxis1();
  uint32_t raw_actualaxis1;
  memcpy(&raw_actualaxis1, &tmp_actualaxis1, sizeof(tmp_actualaxis1));
  if (raw_actualaxis1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_actualaxis1(), target);
  }

  // float actualAxis2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis2 = this->_internal_actualaxis2();
  uint32_t raw_actualaxis2;
  memcpy(&raw_actualaxis2, &tmp_actualaxis2, sizeof(tmp_actualaxis2));
  if (raw_actualaxis2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_actualaxis2(), target);
  }

  // float actualAxis3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis3 = this->_internal_actualaxis3();
  uint32_t raw_actualaxis3;
  memcpy(&raw_actualaxis3, &tmp_actualaxis3, sizeof(tmp_actualaxis3));
  if (raw_actualaxis3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_actualaxis3(), target);
  }

  // float actualAxis4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis4 = this->_internal_actualaxis4();
  uint32_t raw_actualaxis4;
  memcpy(&raw_actualaxis4, &tmp_actualaxis4, sizeof(tmp_actualaxis4));
  if (raw_actualaxis4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_actualaxis4(), target);
  }

  // bool odrive0Axis0Error = 5;
  if (this->_internal_odrive0axis0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_odrive0axis0error(), target);
  }

  // bool odrive0Axis1Error = 6;
  if (this->_internal_odrive0axis1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_odrive0axis1error(), target);
  }

  // bool odrive0Error = 7;
  if (this->_internal_odrive0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_odrive0error(), target);
  }

  // bool odrv0ClearErrors = 8;
  if (this->_internal_odrv0clearerrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_odrv0clearerrors(), target);
  }

  // bool odrive1Axis0Error = 9;
  if (this->_internal_odrive1axis0error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_odrive1axis0error(), target);
  }

  // bool odrive1Axis1Error = 10;
  if (this->_internal_odrive1axis1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_odrive1axis1error(), target);
  }

  // bool odrive1Error = 11;
  if (this->_internal_odrive1error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_odrive1error(), target);
  }

  // bool odrv1ClearErrors = 12;
  if (this->_internal_odrv1clearerrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_odrv1clearerrors(), target);
  }

  // bool safetyMode = 13;
  if (this->_internal_safetymode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_safetymode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLAME_Protocol.ReviewPacket)
  return target;
}

size_t ReviewPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLAME_Protocol.ReviewPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float actualAxis1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis1 = this->_internal_actualaxis1();
  uint32_t raw_actualaxis1;
  memcpy(&raw_actualaxis1, &tmp_actualaxis1, sizeof(tmp_actualaxis1));
  if (raw_actualaxis1 != 0) {
    total_size += 1 + 4;
  }

  // float actualAxis2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis2 = this->_internal_actualaxis2();
  uint32_t raw_actualaxis2;
  memcpy(&raw_actualaxis2, &tmp_actualaxis2, sizeof(tmp_actualaxis2));
  if (raw_actualaxis2 != 0) {
    total_size += 1 + 4;
  }

  // float actualAxis3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis3 = this->_internal_actualaxis3();
  uint32_t raw_actualaxis3;
  memcpy(&raw_actualaxis3, &tmp_actualaxis3, sizeof(tmp_actualaxis3));
  if (raw_actualaxis3 != 0) {
    total_size += 1 + 4;
  }

  // float actualAxis4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis4 = this->_internal_actualaxis4();
  uint32_t raw_actualaxis4;
  memcpy(&raw_actualaxis4, &tmp_actualaxis4, sizeof(tmp_actualaxis4));
  if (raw_actualaxis4 != 0) {
    total_size += 1 + 4;
  }

  // bool odrive0Axis0Error = 5;
  if (this->_internal_odrive0axis0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive0Axis1Error = 6;
  if (this->_internal_odrive0axis1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive0Error = 7;
  if (this->_internal_odrive0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrv0ClearErrors = 8;
  if (this->_internal_odrv0clearerrors() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Axis0Error = 9;
  if (this->_internal_odrive1axis0error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Axis1Error = 10;
  if (this->_internal_odrive1axis1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrive1Error = 11;
  if (this->_internal_odrive1error() != 0) {
    total_size += 1 + 1;
  }

  // bool odrv1ClearErrors = 12;
  if (this->_internal_odrv1clearerrors() != 0) {
    total_size += 1 + 1;
  }

  // bool safetyMode = 13;
  if (this->_internal_safetymode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReviewPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReviewPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReviewPacket::GetClassData() const { return &_class_data_; }

void ReviewPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReviewPacket *>(to)->MergeFrom(
      static_cast<const ReviewPacket &>(from));
}


void ReviewPacket::MergeFrom(const ReviewPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLAME_Protocol.ReviewPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis1 = from._internal_actualaxis1();
  uint32_t raw_actualaxis1;
  memcpy(&raw_actualaxis1, &tmp_actualaxis1, sizeof(tmp_actualaxis1));
  if (raw_actualaxis1 != 0) {
    _internal_set_actualaxis1(from._internal_actualaxis1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis2 = from._internal_actualaxis2();
  uint32_t raw_actualaxis2;
  memcpy(&raw_actualaxis2, &tmp_actualaxis2, sizeof(tmp_actualaxis2));
  if (raw_actualaxis2 != 0) {
    _internal_set_actualaxis2(from._internal_actualaxis2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis3 = from._internal_actualaxis3();
  uint32_t raw_actualaxis3;
  memcpy(&raw_actualaxis3, &tmp_actualaxis3, sizeof(tmp_actualaxis3));
  if (raw_actualaxis3 != 0) {
    _internal_set_actualaxis3(from._internal_actualaxis3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_actualaxis4 = from._internal_actualaxis4();
  uint32_t raw_actualaxis4;
  memcpy(&raw_actualaxis4, &tmp_actualaxis4, sizeof(tmp_actualaxis4));
  if (raw_actualaxis4 != 0) {
    _internal_set_actualaxis4(from._internal_actualaxis4());
  }
  if (from._internal_odrive0axis0error() != 0) {
    _internal_set_odrive0axis0error(from._internal_odrive0axis0error());
  }
  if (from._internal_odrive0axis1error() != 0) {
    _internal_set_odrive0axis1error(from._internal_odrive0axis1error());
  }
  if (from._internal_odrive0error() != 0) {
    _internal_set_odrive0error(from._internal_odrive0error());
  }
  if (from._internal_odrv0clearerrors() != 0) {
    _internal_set_odrv0clearerrors(from._internal_odrv0clearerrors());
  }
  if (from._internal_odrive1axis0error() != 0) {
    _internal_set_odrive1axis0error(from._internal_odrive1axis0error());
  }
  if (from._internal_odrive1axis1error() != 0) {
    _internal_set_odrive1axis1error(from._internal_odrive1axis1error());
  }
  if (from._internal_odrive1error() != 0) {
    _internal_set_odrive1error(from._internal_odrive1error());
  }
  if (from._internal_odrv1clearerrors() != 0) {
    _internal_set_odrv1clearerrors(from._internal_odrv1clearerrors());
  }
  if (from._internal_safetymode() != 0) {
    _internal_set_safetymode(from._internal_safetymode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReviewPacket::CopyFrom(const ReviewPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLAME_Protocol.ReviewPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviewPacket::IsInitialized() const {
  return true;
}

void ReviewPacket::InternalSwap(ReviewPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReviewPacket, safetymode_)
      + sizeof(ReviewPacket::safetymode_)
      - PROTOBUF_FIELD_OFFSET(ReviewPacket, actualaxis1_)>(
          reinterpret_cast<char*>(&actualaxis1_),
          reinterpret_cast<char*>(&other->actualaxis1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReviewPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FLAME_2eproto_getter, &descriptor_table_FLAME_2eproto_once,
      file_level_metadata_FLAME_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace FLAME_Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FLAME_Protocol::DiscoveryPacket* Arena::CreateMaybeMessage< ::FLAME_Protocol::DiscoveryPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLAME_Protocol::DiscoveryPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::FLAME_Protocol::DiscoveryResponse* Arena::CreateMaybeMessage< ::FLAME_Protocol::DiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLAME_Protocol::DiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLAME_Protocol::ControlPacket* Arena::CreateMaybeMessage< ::FLAME_Protocol::ControlPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLAME_Protocol::ControlPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::FLAME_Protocol::ReviewPacket* Arena::CreateMaybeMessage< ::FLAME_Protocol::ReviewPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLAME_Protocol::ReviewPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
