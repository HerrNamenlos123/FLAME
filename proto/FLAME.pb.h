// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FLAME.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FLAME_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FLAME_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FLAME_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FLAME_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FLAME_2eproto;
namespace FLAME_Protocol {
class ControlPacket;
class ControlPacketDefaultTypeInternal;
extern ControlPacketDefaultTypeInternal _ControlPacket_default_instance_;
class DiscoveryPacket;
class DiscoveryPacketDefaultTypeInternal;
extern DiscoveryPacketDefaultTypeInternal _DiscoveryPacket_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
class ReviewPacket;
class ReviewPacketDefaultTypeInternal;
extern ReviewPacketDefaultTypeInternal _ReviewPacket_default_instance_;
}  // namespace FLAME_Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::FLAME_Protocol::ControlPacket* Arena::CreateMaybeMessage<::FLAME_Protocol::ControlPacket>(Arena*);
template<> ::FLAME_Protocol::DiscoveryPacket* Arena::CreateMaybeMessage<::FLAME_Protocol::DiscoveryPacket>(Arena*);
template<> ::FLAME_Protocol::DiscoveryResponse* Arena::CreateMaybeMessage<::FLAME_Protocol::DiscoveryResponse>(Arena*);
template<> ::FLAME_Protocol::ReviewPacket* Arena::CreateMaybeMessage<::FLAME_Protocol::ReviewPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FLAME_Protocol {

// ===================================================================

class DiscoveryPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLAME_Protocol.DiscoveryPacket) */ {
 public:
  inline DiscoveryPacket() : DiscoveryPacket(nullptr) {};
  virtual ~DiscoveryPacket();

  DiscoveryPacket(const DiscoveryPacket& from);
  DiscoveryPacket(DiscoveryPacket&& from) noexcept
    : DiscoveryPacket() {
    *this = ::std::move(from);
  }

  inline DiscoveryPacket& operator=(const DiscoveryPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryPacket& operator=(DiscoveryPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveryPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveryPacket* internal_default_instance() {
    return reinterpret_cast<const DiscoveryPacket*>(
               &_DiscoveryPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiscoveryPacket& a, DiscoveryPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryPacket* New() const final {
    return CreateMaybeMessage<DiscoveryPacket>(nullptr);
  }

  DiscoveryPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveryPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveryPacket& from);
  void MergeFrom(const DiscoveryPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLAME_Protocol.DiscoveryPacket";
  }
  protected:
  explicit DiscoveryPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLAME_2eproto);
    return ::descriptor_table_FLAME_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FLAME_Protocol.DiscoveryPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLAME_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLAME_Protocol.DiscoveryResponse) */ {
 public:
  inline DiscoveryResponse() : DiscoveryResponse(nullptr) {};
  virtual ~DiscoveryResponse();

  DiscoveryResponse(const DiscoveryResponse& from);
  DiscoveryResponse(DiscoveryResponse&& from) noexcept
    : DiscoveryResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryResponse& operator=(const DiscoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryResponse& operator=(DiscoveryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveryResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryResponse*>(
               &_DiscoveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiscoveryResponse& a, DiscoveryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryResponse* New() const final {
    return CreateMaybeMessage<DiscoveryResponse>(nullptr);
  }

  DiscoveryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveryResponse& from);
  void MergeFrom(const DiscoveryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLAME_Protocol.DiscoveryResponse";
  }
  protected:
  explicit DiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLAME_2eproto);
    return ::descriptor_table_FLAME_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // uint32 ipAddress = 1;
  void clear_ipaddress();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipaddress() const;
  void set_ipaddress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipaddress() const;
  void _internal_set_ipaddress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FLAME_Protocol.DiscoveryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLAME_2eproto;
};
// -------------------------------------------------------------------

class ControlPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLAME_Protocol.ControlPacket) */ {
 public:
  inline ControlPacket() : ControlPacket(nullptr) {};
  virtual ~ControlPacket();

  ControlPacket(const ControlPacket& from);
  ControlPacket(ControlPacket&& from) noexcept
    : ControlPacket() {
    *this = ::std::move(from);
  }

  inline ControlPacket& operator=(const ControlPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlPacket& operator=(ControlPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlPacket* internal_default_instance() {
    return reinterpret_cast<const ControlPacket*>(
               &_ControlPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControlPacket& a, ControlPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlPacket* New() const final {
    return CreateMaybeMessage<ControlPacket>(nullptr);
  }

  ControlPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlPacket& from);
  void MergeFrom(const ControlPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLAME_Protocol.ControlPacket";
  }
  protected:
  explicit ControlPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLAME_2eproto);
    return ::descriptor_table_FLAME_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesiredAxis1FieldNumber = 1,
    kDesiredAxis2FieldNumber = 2,
    kDesiredAxis3FieldNumber = 3,
    kDesiredAxis4FieldNumber = 4,
    kOdrive0Axis0ErrorFieldNumber = 5,
    kOdrive0Axis1ErrorFieldNumber = 6,
    kOdrive0ErrorFieldNumber = 7,
    kOdrv0ClearErrorsFieldNumber = 8,
    kOdrive1Axis0ErrorFieldNumber = 9,
    kOdrive1Axis1ErrorFieldNumber = 10,
    kOdrive1ErrorFieldNumber = 11,
    kOdrv1ClearErrorsFieldNumber = 12,
    kSafetyModeFieldNumber = 13,
  };
  // float desiredAxis1 = 1;
  void clear_desiredaxis1();
  float desiredaxis1() const;
  void set_desiredaxis1(float value);
  private:
  float _internal_desiredaxis1() const;
  void _internal_set_desiredaxis1(float value);
  public:

  // float desiredAxis2 = 2;
  void clear_desiredaxis2();
  float desiredaxis2() const;
  void set_desiredaxis2(float value);
  private:
  float _internal_desiredaxis2() const;
  void _internal_set_desiredaxis2(float value);
  public:

  // float desiredAxis3 = 3;
  void clear_desiredaxis3();
  float desiredaxis3() const;
  void set_desiredaxis3(float value);
  private:
  float _internal_desiredaxis3() const;
  void _internal_set_desiredaxis3(float value);
  public:

  // float desiredAxis4 = 4;
  void clear_desiredaxis4();
  float desiredaxis4() const;
  void set_desiredaxis4(float value);
  private:
  float _internal_desiredaxis4() const;
  void _internal_set_desiredaxis4(float value);
  public:

  // bool odrive0Axis0Error = 5;
  void clear_odrive0axis0error();
  bool odrive0axis0error() const;
  void set_odrive0axis0error(bool value);
  private:
  bool _internal_odrive0axis0error() const;
  void _internal_set_odrive0axis0error(bool value);
  public:

  // bool odrive0Axis1Error = 6;
  void clear_odrive0axis1error();
  bool odrive0axis1error() const;
  void set_odrive0axis1error(bool value);
  private:
  bool _internal_odrive0axis1error() const;
  void _internal_set_odrive0axis1error(bool value);
  public:

  // bool odrive0Error = 7;
  void clear_odrive0error();
  bool odrive0error() const;
  void set_odrive0error(bool value);
  private:
  bool _internal_odrive0error() const;
  void _internal_set_odrive0error(bool value);
  public:

  // bool odrv0ClearErrors = 8;
  void clear_odrv0clearerrors();
  bool odrv0clearerrors() const;
  void set_odrv0clearerrors(bool value);
  private:
  bool _internal_odrv0clearerrors() const;
  void _internal_set_odrv0clearerrors(bool value);
  public:

  // bool odrive1Axis0Error = 9;
  void clear_odrive1axis0error();
  bool odrive1axis0error() const;
  void set_odrive1axis0error(bool value);
  private:
  bool _internal_odrive1axis0error() const;
  void _internal_set_odrive1axis0error(bool value);
  public:

  // bool odrive1Axis1Error = 10;
  void clear_odrive1axis1error();
  bool odrive1axis1error() const;
  void set_odrive1axis1error(bool value);
  private:
  bool _internal_odrive1axis1error() const;
  void _internal_set_odrive1axis1error(bool value);
  public:

  // bool odrive1Error = 11;
  void clear_odrive1error();
  bool odrive1error() const;
  void set_odrive1error(bool value);
  private:
  bool _internal_odrive1error() const;
  void _internal_set_odrive1error(bool value);
  public:

  // bool odrv1ClearErrors = 12;
  void clear_odrv1clearerrors();
  bool odrv1clearerrors() const;
  void set_odrv1clearerrors(bool value);
  private:
  bool _internal_odrv1clearerrors() const;
  void _internal_set_odrv1clearerrors(bool value);
  public:

  // bool safetyMode = 13;
  void clear_safetymode();
  bool safetymode() const;
  void set_safetymode(bool value);
  private:
  bool _internal_safetymode() const;
  void _internal_set_safetymode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FLAME_Protocol.ControlPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float desiredaxis1_;
  float desiredaxis2_;
  float desiredaxis3_;
  float desiredaxis4_;
  bool odrive0axis0error_;
  bool odrive0axis1error_;
  bool odrive0error_;
  bool odrv0clearerrors_;
  bool odrive1axis0error_;
  bool odrive1axis1error_;
  bool odrive1error_;
  bool odrv1clearerrors_;
  bool safetymode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLAME_2eproto;
};
// -------------------------------------------------------------------

class ReviewPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLAME_Protocol.ReviewPacket) */ {
 public:
  inline ReviewPacket() : ReviewPacket(nullptr) {};
  virtual ~ReviewPacket();

  ReviewPacket(const ReviewPacket& from);
  ReviewPacket(ReviewPacket&& from) noexcept
    : ReviewPacket() {
    *this = ::std::move(from);
  }

  inline ReviewPacket& operator=(const ReviewPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReviewPacket& operator=(ReviewPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReviewPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReviewPacket* internal_default_instance() {
    return reinterpret_cast<const ReviewPacket*>(
               &_ReviewPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReviewPacket& a, ReviewPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ReviewPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReviewPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReviewPacket* New() const final {
    return CreateMaybeMessage<ReviewPacket>(nullptr);
  }

  ReviewPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReviewPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReviewPacket& from);
  void MergeFrom(const ReviewPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReviewPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLAME_Protocol.ReviewPacket";
  }
  protected:
  explicit ReviewPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FLAME_2eproto);
    return ::descriptor_table_FLAME_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualAxis1FieldNumber = 1,
    kActualAxis2FieldNumber = 2,
    kActualAxis3FieldNumber = 3,
    kActualAxis4FieldNumber = 4,
    kOdrive0Axis0ErrorFieldNumber = 5,
    kOdrive0Axis1ErrorFieldNumber = 6,
    kOdrive0ErrorFieldNumber = 7,
    kOdrv0ClearErrorsFieldNumber = 8,
    kOdrive1Axis0ErrorFieldNumber = 9,
    kOdrive1Axis1ErrorFieldNumber = 10,
    kOdrive1ErrorFieldNumber = 11,
    kOdrv1ClearErrorsFieldNumber = 12,
    kSafetyModeFieldNumber = 13,
  };
  // float actualAxis1 = 1;
  void clear_actualaxis1();
  float actualaxis1() const;
  void set_actualaxis1(float value);
  private:
  float _internal_actualaxis1() const;
  void _internal_set_actualaxis1(float value);
  public:

  // float actualAxis2 = 2;
  void clear_actualaxis2();
  float actualaxis2() const;
  void set_actualaxis2(float value);
  private:
  float _internal_actualaxis2() const;
  void _internal_set_actualaxis2(float value);
  public:

  // float actualAxis3 = 3;
  void clear_actualaxis3();
  float actualaxis3() const;
  void set_actualaxis3(float value);
  private:
  float _internal_actualaxis3() const;
  void _internal_set_actualaxis3(float value);
  public:

  // float actualAxis4 = 4;
  void clear_actualaxis4();
  float actualaxis4() const;
  void set_actualaxis4(float value);
  private:
  float _internal_actualaxis4() const;
  void _internal_set_actualaxis4(float value);
  public:

  // bool odrive0Axis0Error = 5;
  void clear_odrive0axis0error();
  bool odrive0axis0error() const;
  void set_odrive0axis0error(bool value);
  private:
  bool _internal_odrive0axis0error() const;
  void _internal_set_odrive0axis0error(bool value);
  public:

  // bool odrive0Axis1Error = 6;
  void clear_odrive0axis1error();
  bool odrive0axis1error() const;
  void set_odrive0axis1error(bool value);
  private:
  bool _internal_odrive0axis1error() const;
  void _internal_set_odrive0axis1error(bool value);
  public:

  // bool odrive0Error = 7;
  void clear_odrive0error();
  bool odrive0error() const;
  void set_odrive0error(bool value);
  private:
  bool _internal_odrive0error() const;
  void _internal_set_odrive0error(bool value);
  public:

  // bool odrv0ClearErrors = 8;
  void clear_odrv0clearerrors();
  bool odrv0clearerrors() const;
  void set_odrv0clearerrors(bool value);
  private:
  bool _internal_odrv0clearerrors() const;
  void _internal_set_odrv0clearerrors(bool value);
  public:

  // bool odrive1Axis0Error = 9;
  void clear_odrive1axis0error();
  bool odrive1axis0error() const;
  void set_odrive1axis0error(bool value);
  private:
  bool _internal_odrive1axis0error() const;
  void _internal_set_odrive1axis0error(bool value);
  public:

  // bool odrive1Axis1Error = 10;
  void clear_odrive1axis1error();
  bool odrive1axis1error() const;
  void set_odrive1axis1error(bool value);
  private:
  bool _internal_odrive1axis1error() const;
  void _internal_set_odrive1axis1error(bool value);
  public:

  // bool odrive1Error = 11;
  void clear_odrive1error();
  bool odrive1error() const;
  void set_odrive1error(bool value);
  private:
  bool _internal_odrive1error() const;
  void _internal_set_odrive1error(bool value);
  public:

  // bool odrv1ClearErrors = 12;
  void clear_odrv1clearerrors();
  bool odrv1clearerrors() const;
  void set_odrv1clearerrors(bool value);
  private:
  bool _internal_odrv1clearerrors() const;
  void _internal_set_odrv1clearerrors(bool value);
  public:

  // bool safetyMode = 13;
  void clear_safetymode();
  bool safetymode() const;
  void set_safetymode(bool value);
  private:
  bool _internal_safetymode() const;
  void _internal_set_safetymode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FLAME_Protocol.ReviewPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float actualaxis1_;
  float actualaxis2_;
  float actualaxis3_;
  float actualaxis4_;
  bool odrive0axis0error_;
  bool odrive0axis1error_;
  bool odrive0error_;
  bool odrv0clearerrors_;
  bool odrive1axis0error_;
  bool odrive1axis1error_;
  bool odrive1error_;
  bool odrv1clearerrors_;
  bool safetymode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FLAME_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiscoveryPacket

// -------------------------------------------------------------------

// DiscoveryResponse

// uint32 ipAddress = 1;
inline void DiscoveryResponse::clear_ipaddress() {
  ipaddress_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveryResponse::_internal_ipaddress() const {
  return ipaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveryResponse::ipaddress() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.DiscoveryResponse.ipAddress)
  return _internal_ipaddress();
}
inline void DiscoveryResponse::_internal_set_ipaddress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipaddress_ = value;
}
inline void DiscoveryResponse::set_ipaddress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipaddress(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.DiscoveryResponse.ipAddress)
}

// -------------------------------------------------------------------

// ControlPacket

// float desiredAxis1 = 1;
inline void ControlPacket::clear_desiredaxis1() {
  desiredaxis1_ = 0;
}
inline float ControlPacket::_internal_desiredaxis1() const {
  return desiredaxis1_;
}
inline float ControlPacket::desiredaxis1() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.desiredAxis1)
  return _internal_desiredaxis1();
}
inline void ControlPacket::_internal_set_desiredaxis1(float value) {
  
  desiredaxis1_ = value;
}
inline void ControlPacket::set_desiredaxis1(float value) {
  _internal_set_desiredaxis1(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.desiredAxis1)
}

// float desiredAxis2 = 2;
inline void ControlPacket::clear_desiredaxis2() {
  desiredaxis2_ = 0;
}
inline float ControlPacket::_internal_desiredaxis2() const {
  return desiredaxis2_;
}
inline float ControlPacket::desiredaxis2() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.desiredAxis2)
  return _internal_desiredaxis2();
}
inline void ControlPacket::_internal_set_desiredaxis2(float value) {
  
  desiredaxis2_ = value;
}
inline void ControlPacket::set_desiredaxis2(float value) {
  _internal_set_desiredaxis2(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.desiredAxis2)
}

// float desiredAxis3 = 3;
inline void ControlPacket::clear_desiredaxis3() {
  desiredaxis3_ = 0;
}
inline float ControlPacket::_internal_desiredaxis3() const {
  return desiredaxis3_;
}
inline float ControlPacket::desiredaxis3() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.desiredAxis3)
  return _internal_desiredaxis3();
}
inline void ControlPacket::_internal_set_desiredaxis3(float value) {
  
  desiredaxis3_ = value;
}
inline void ControlPacket::set_desiredaxis3(float value) {
  _internal_set_desiredaxis3(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.desiredAxis3)
}

// float desiredAxis4 = 4;
inline void ControlPacket::clear_desiredaxis4() {
  desiredaxis4_ = 0;
}
inline float ControlPacket::_internal_desiredaxis4() const {
  return desiredaxis4_;
}
inline float ControlPacket::desiredaxis4() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.desiredAxis4)
  return _internal_desiredaxis4();
}
inline void ControlPacket::_internal_set_desiredaxis4(float value) {
  
  desiredaxis4_ = value;
}
inline void ControlPacket::set_desiredaxis4(float value) {
  _internal_set_desiredaxis4(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.desiredAxis4)
}

// bool odrive0Axis0Error = 5;
inline void ControlPacket::clear_odrive0axis0error() {
  odrive0axis0error_ = false;
}
inline bool ControlPacket::_internal_odrive0axis0error() const {
  return odrive0axis0error_;
}
inline bool ControlPacket::odrive0axis0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive0Axis0Error)
  return _internal_odrive0axis0error();
}
inline void ControlPacket::_internal_set_odrive0axis0error(bool value) {
  
  odrive0axis0error_ = value;
}
inline void ControlPacket::set_odrive0axis0error(bool value) {
  _internal_set_odrive0axis0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive0Axis0Error)
}

// bool odrive0Axis1Error = 6;
inline void ControlPacket::clear_odrive0axis1error() {
  odrive0axis1error_ = false;
}
inline bool ControlPacket::_internal_odrive0axis1error() const {
  return odrive0axis1error_;
}
inline bool ControlPacket::odrive0axis1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive0Axis1Error)
  return _internal_odrive0axis1error();
}
inline void ControlPacket::_internal_set_odrive0axis1error(bool value) {
  
  odrive0axis1error_ = value;
}
inline void ControlPacket::set_odrive0axis1error(bool value) {
  _internal_set_odrive0axis1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive0Axis1Error)
}

// bool odrive0Error = 7;
inline void ControlPacket::clear_odrive0error() {
  odrive0error_ = false;
}
inline bool ControlPacket::_internal_odrive0error() const {
  return odrive0error_;
}
inline bool ControlPacket::odrive0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive0Error)
  return _internal_odrive0error();
}
inline void ControlPacket::_internal_set_odrive0error(bool value) {
  
  odrive0error_ = value;
}
inline void ControlPacket::set_odrive0error(bool value) {
  _internal_set_odrive0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive0Error)
}

// bool odrv0ClearErrors = 8;
inline void ControlPacket::clear_odrv0clearerrors() {
  odrv0clearerrors_ = false;
}
inline bool ControlPacket::_internal_odrv0clearerrors() const {
  return odrv0clearerrors_;
}
inline bool ControlPacket::odrv0clearerrors() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrv0ClearErrors)
  return _internal_odrv0clearerrors();
}
inline void ControlPacket::_internal_set_odrv0clearerrors(bool value) {
  
  odrv0clearerrors_ = value;
}
inline void ControlPacket::set_odrv0clearerrors(bool value) {
  _internal_set_odrv0clearerrors(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrv0ClearErrors)
}

// bool odrive1Axis0Error = 9;
inline void ControlPacket::clear_odrive1axis0error() {
  odrive1axis0error_ = false;
}
inline bool ControlPacket::_internal_odrive1axis0error() const {
  return odrive1axis0error_;
}
inline bool ControlPacket::odrive1axis0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive1Axis0Error)
  return _internal_odrive1axis0error();
}
inline void ControlPacket::_internal_set_odrive1axis0error(bool value) {
  
  odrive1axis0error_ = value;
}
inline void ControlPacket::set_odrive1axis0error(bool value) {
  _internal_set_odrive1axis0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive1Axis0Error)
}

// bool odrive1Axis1Error = 10;
inline void ControlPacket::clear_odrive1axis1error() {
  odrive1axis1error_ = false;
}
inline bool ControlPacket::_internal_odrive1axis1error() const {
  return odrive1axis1error_;
}
inline bool ControlPacket::odrive1axis1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive1Axis1Error)
  return _internal_odrive1axis1error();
}
inline void ControlPacket::_internal_set_odrive1axis1error(bool value) {
  
  odrive1axis1error_ = value;
}
inline void ControlPacket::set_odrive1axis1error(bool value) {
  _internal_set_odrive1axis1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive1Axis1Error)
}

// bool odrive1Error = 11;
inline void ControlPacket::clear_odrive1error() {
  odrive1error_ = false;
}
inline bool ControlPacket::_internal_odrive1error() const {
  return odrive1error_;
}
inline bool ControlPacket::odrive1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrive1Error)
  return _internal_odrive1error();
}
inline void ControlPacket::_internal_set_odrive1error(bool value) {
  
  odrive1error_ = value;
}
inline void ControlPacket::set_odrive1error(bool value) {
  _internal_set_odrive1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrive1Error)
}

// bool odrv1ClearErrors = 12;
inline void ControlPacket::clear_odrv1clearerrors() {
  odrv1clearerrors_ = false;
}
inline bool ControlPacket::_internal_odrv1clearerrors() const {
  return odrv1clearerrors_;
}
inline bool ControlPacket::odrv1clearerrors() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.odrv1ClearErrors)
  return _internal_odrv1clearerrors();
}
inline void ControlPacket::_internal_set_odrv1clearerrors(bool value) {
  
  odrv1clearerrors_ = value;
}
inline void ControlPacket::set_odrv1clearerrors(bool value) {
  _internal_set_odrv1clearerrors(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.odrv1ClearErrors)
}

// bool safetyMode = 13;
inline void ControlPacket::clear_safetymode() {
  safetymode_ = false;
}
inline bool ControlPacket::_internal_safetymode() const {
  return safetymode_;
}
inline bool ControlPacket::safetymode() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ControlPacket.safetyMode)
  return _internal_safetymode();
}
inline void ControlPacket::_internal_set_safetymode(bool value) {
  
  safetymode_ = value;
}
inline void ControlPacket::set_safetymode(bool value) {
  _internal_set_safetymode(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ControlPacket.safetyMode)
}

// -------------------------------------------------------------------

// ReviewPacket

// float actualAxis1 = 1;
inline void ReviewPacket::clear_actualaxis1() {
  actualaxis1_ = 0;
}
inline float ReviewPacket::_internal_actualaxis1() const {
  return actualaxis1_;
}
inline float ReviewPacket::actualaxis1() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.actualAxis1)
  return _internal_actualaxis1();
}
inline void ReviewPacket::_internal_set_actualaxis1(float value) {
  
  actualaxis1_ = value;
}
inline void ReviewPacket::set_actualaxis1(float value) {
  _internal_set_actualaxis1(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.actualAxis1)
}

// float actualAxis2 = 2;
inline void ReviewPacket::clear_actualaxis2() {
  actualaxis2_ = 0;
}
inline float ReviewPacket::_internal_actualaxis2() const {
  return actualaxis2_;
}
inline float ReviewPacket::actualaxis2() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.actualAxis2)
  return _internal_actualaxis2();
}
inline void ReviewPacket::_internal_set_actualaxis2(float value) {
  
  actualaxis2_ = value;
}
inline void ReviewPacket::set_actualaxis2(float value) {
  _internal_set_actualaxis2(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.actualAxis2)
}

// float actualAxis3 = 3;
inline void ReviewPacket::clear_actualaxis3() {
  actualaxis3_ = 0;
}
inline float ReviewPacket::_internal_actualaxis3() const {
  return actualaxis3_;
}
inline float ReviewPacket::actualaxis3() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.actualAxis3)
  return _internal_actualaxis3();
}
inline void ReviewPacket::_internal_set_actualaxis3(float value) {
  
  actualaxis3_ = value;
}
inline void ReviewPacket::set_actualaxis3(float value) {
  _internal_set_actualaxis3(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.actualAxis3)
}

// float actualAxis4 = 4;
inline void ReviewPacket::clear_actualaxis4() {
  actualaxis4_ = 0;
}
inline float ReviewPacket::_internal_actualaxis4() const {
  return actualaxis4_;
}
inline float ReviewPacket::actualaxis4() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.actualAxis4)
  return _internal_actualaxis4();
}
inline void ReviewPacket::_internal_set_actualaxis4(float value) {
  
  actualaxis4_ = value;
}
inline void ReviewPacket::set_actualaxis4(float value) {
  _internal_set_actualaxis4(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.actualAxis4)
}

// bool odrive0Axis0Error = 5;
inline void ReviewPacket::clear_odrive0axis0error() {
  odrive0axis0error_ = false;
}
inline bool ReviewPacket::_internal_odrive0axis0error() const {
  return odrive0axis0error_;
}
inline bool ReviewPacket::odrive0axis0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive0Axis0Error)
  return _internal_odrive0axis0error();
}
inline void ReviewPacket::_internal_set_odrive0axis0error(bool value) {
  
  odrive0axis0error_ = value;
}
inline void ReviewPacket::set_odrive0axis0error(bool value) {
  _internal_set_odrive0axis0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive0Axis0Error)
}

// bool odrive0Axis1Error = 6;
inline void ReviewPacket::clear_odrive0axis1error() {
  odrive0axis1error_ = false;
}
inline bool ReviewPacket::_internal_odrive0axis1error() const {
  return odrive0axis1error_;
}
inline bool ReviewPacket::odrive0axis1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive0Axis1Error)
  return _internal_odrive0axis1error();
}
inline void ReviewPacket::_internal_set_odrive0axis1error(bool value) {
  
  odrive0axis1error_ = value;
}
inline void ReviewPacket::set_odrive0axis1error(bool value) {
  _internal_set_odrive0axis1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive0Axis1Error)
}

// bool odrive0Error = 7;
inline void ReviewPacket::clear_odrive0error() {
  odrive0error_ = false;
}
inline bool ReviewPacket::_internal_odrive0error() const {
  return odrive0error_;
}
inline bool ReviewPacket::odrive0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive0Error)
  return _internal_odrive0error();
}
inline void ReviewPacket::_internal_set_odrive0error(bool value) {
  
  odrive0error_ = value;
}
inline void ReviewPacket::set_odrive0error(bool value) {
  _internal_set_odrive0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive0Error)
}

// bool odrv0ClearErrors = 8;
inline void ReviewPacket::clear_odrv0clearerrors() {
  odrv0clearerrors_ = false;
}
inline bool ReviewPacket::_internal_odrv0clearerrors() const {
  return odrv0clearerrors_;
}
inline bool ReviewPacket::odrv0clearerrors() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrv0ClearErrors)
  return _internal_odrv0clearerrors();
}
inline void ReviewPacket::_internal_set_odrv0clearerrors(bool value) {
  
  odrv0clearerrors_ = value;
}
inline void ReviewPacket::set_odrv0clearerrors(bool value) {
  _internal_set_odrv0clearerrors(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrv0ClearErrors)
}

// bool odrive1Axis0Error = 9;
inline void ReviewPacket::clear_odrive1axis0error() {
  odrive1axis0error_ = false;
}
inline bool ReviewPacket::_internal_odrive1axis0error() const {
  return odrive1axis0error_;
}
inline bool ReviewPacket::odrive1axis0error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive1Axis0Error)
  return _internal_odrive1axis0error();
}
inline void ReviewPacket::_internal_set_odrive1axis0error(bool value) {
  
  odrive1axis0error_ = value;
}
inline void ReviewPacket::set_odrive1axis0error(bool value) {
  _internal_set_odrive1axis0error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive1Axis0Error)
}

// bool odrive1Axis1Error = 10;
inline void ReviewPacket::clear_odrive1axis1error() {
  odrive1axis1error_ = false;
}
inline bool ReviewPacket::_internal_odrive1axis1error() const {
  return odrive1axis1error_;
}
inline bool ReviewPacket::odrive1axis1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive1Axis1Error)
  return _internal_odrive1axis1error();
}
inline void ReviewPacket::_internal_set_odrive1axis1error(bool value) {
  
  odrive1axis1error_ = value;
}
inline void ReviewPacket::set_odrive1axis1error(bool value) {
  _internal_set_odrive1axis1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive1Axis1Error)
}

// bool odrive1Error = 11;
inline void ReviewPacket::clear_odrive1error() {
  odrive1error_ = false;
}
inline bool ReviewPacket::_internal_odrive1error() const {
  return odrive1error_;
}
inline bool ReviewPacket::odrive1error() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrive1Error)
  return _internal_odrive1error();
}
inline void ReviewPacket::_internal_set_odrive1error(bool value) {
  
  odrive1error_ = value;
}
inline void ReviewPacket::set_odrive1error(bool value) {
  _internal_set_odrive1error(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrive1Error)
}

// bool odrv1ClearErrors = 12;
inline void ReviewPacket::clear_odrv1clearerrors() {
  odrv1clearerrors_ = false;
}
inline bool ReviewPacket::_internal_odrv1clearerrors() const {
  return odrv1clearerrors_;
}
inline bool ReviewPacket::odrv1clearerrors() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.odrv1ClearErrors)
  return _internal_odrv1clearerrors();
}
inline void ReviewPacket::_internal_set_odrv1clearerrors(bool value) {
  
  odrv1clearerrors_ = value;
}
inline void ReviewPacket::set_odrv1clearerrors(bool value) {
  _internal_set_odrv1clearerrors(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.odrv1ClearErrors)
}

// bool safetyMode = 13;
inline void ReviewPacket::clear_safetymode() {
  safetymode_ = false;
}
inline bool ReviewPacket::_internal_safetymode() const {
  return safetymode_;
}
inline bool ReviewPacket::safetymode() const {
  // @@protoc_insertion_point(field_get:FLAME_Protocol.ReviewPacket.safetyMode)
  return _internal_safetymode();
}
inline void ReviewPacket::_internal_set_safetymode(bool value) {
  
  safetymode_ = value;
}
inline void ReviewPacket::set_safetymode(bool value) {
  _internal_set_safetymode(value);
  // @@protoc_insertion_point(field_set:FLAME_Protocol.ReviewPacket.safetyMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FLAME_Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FLAME_2eproto
